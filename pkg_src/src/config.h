/*
 * Autogenerated by the Meson build system.
 * Do not edit, your changes will be lost.
 */

#pragma once

#include <string>
#include <vector>

// Include proper headers for types used in Configuration
#include "common/log.h"

// Forward declarations for endpoint configs
struct UdpEndpointConfig;
struct UartEndpointConfig;
struct TcpEndpointConfig;
struct LogOptions;

// Forward declare EndpointStats namespace
namespace EndpointStats {
    struct StatsConfig;
}

#define BINDIR /usr/bin

#define HAVE_DECL_AIO_INIT 1

#define HAVE_WADDRESS_OF_PACKED_MEMBER 1

#ifndef PACKAGE
#define PACKAGE "mavlink-router"
#endif

/* Project version */
#define VERSION "3"

struct Configuration {
    char confdir[512] = {};
    char logdir[512] = {};
    char binlogdir[512] = {};
    bool tcp_debug = false;
    bool routing_debug = false;
    bool mavparse_debug = false;
    bool stats_debug = false;
    bool dedup_debug = false;
    bool verbose = false;

    // Configuration fields required by main.cpp
    unsigned long tcp_port = 5760;
    bool report_msg_statistics = false;
    Log::Level debug_log_level = Log::Level::INFO;
    unsigned long dedup_period_ms = 100;
    unsigned long sniffer_sysid = 0;

    // Configuration file paths
    std::string json_conf_file;
    std::string stats_conf_file;
    std::string http_conf_file;

    // Additional string configuration fields
    std::string conf_file_name;
    std::string conf_dir;
    std::string extension_conf_dir;

    // Log backend configuration
    Log::Backend log_backend = Log::Backend::STDERR;

    // Configuration containers for endpoints
    std::vector<UdpEndpointConfig> udp_configs;
    std::vector<UartEndpointConfig> uart_configs;
    std::vector<TcpEndpointConfig> tcp_configs;
    LogOptions log_config;

    // Statistics configuration (forward declared)
    EndpointStats::StatsConfig stats_config;
};